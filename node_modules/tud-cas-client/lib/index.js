/*
@author Kai

This is a modified version of the cas-client module
provided at https://bitbucket.org/hmcqueen/node-cas-client/wiki/Home
 */

var Validator, http, https, url;

url = require('url');

http = require('http');

https = require('https');

parseString = require('xml2js').parseString;

Validator = (function() {

    function Validator(ssoBase, serverBaseURL) {
        this.ssoBase = ssoBase;
        this.serverBaseURL = serverBaseURL;
        this.parsed = url.parse(this.ssoBase);
        if (this.parsed.protocol === 'http:') {
            this.client = http;
        } else {
            this.client = https;
        }
    }

    Validator.prototype.validate = function(request, ticket, callback) {
        var get, parsedURL, resolvedURL, service;
        resolvedURL = url.resolve(this.serverBaseURL, request.url);
        parsedURL = url.parse(resolvedURL, true);
        delete parsedURL.query.ticket;
        delete parsedURL.search;
        service = url.format(parsedURL);
        get = this.client.get({
            host: this.parsed.host,
            port: this.parsed.port,
            path: url.format({
                //pathname: '/validate',
                pathname: '/serviceValidate',
                query: {
                    ticket: ticket,
                    service: service
                }
            })
        }, function(response) {
            var body;
            response.setEncoding('utf8');
            body = '';
            response.on('data', function(chunk) {
                //console.info(chunk);
                return body += chunk;
            });
            return response.on('end', function() {
                var user;
                var authsuccess = false;
                parseString(body, function (err, result) {
                    if(result["cas:serviceResponse"]["cas:authenticationFailure"]!=undefined) {
                        console.log("FAILURE bei CAS");
                        console.dir(result["cas:serviceResponse"]["cas:authenticationFailure"]);
                        authsuccess = false;
                        /*callback(null, null);
                         return;*/
                    }
                    else if(result["cas:serviceResponse"]["cas:authenticationSuccess"]!=undefined) {
                        //console.log("Erfolgreich authentifiziert!");
                        var success = result["cas:serviceResponse"]["cas:authenticationSuccess"][0];
                        var userid = success["cas:user"][0];
                        //console.dir(success);
                        //console.dir(userid[0]);
                        var attributes = success["cas:attributes"][0];
                        //console.dir(attributes);              // debugging
                        var surname = attributes["cas:surname"][0];
                        var givenName = attributes["cas:givenName"][0];

                        var mail = attributes["cas:mail"][0];
                        //console.log("user id: "+userid);
                        //console.log("Name: " +givenName +" " +surname);
                        //console.log("Mail: " +mail);

                        var usercontext = attributes["cas:__AUTHUSERCONTEXT__"][0]; // student or employee

                        authsuccess = true;
                        user = {
                            id: userid,
                            surname: surname,
                            givenname: givenName,
                            mail: mail,
                            usercontext: usercontext
                        };
                        /*callback(user, null);
                         return;*/
                    }


                });

                /*
                 var lines, user;
                 lines = body.split('\n');
                 //for(var l=0;l<lines.length;l++) { console.info("Line "+l+": "+lines[l]);}
                 if (lines.length >= 1) {
                 if (lines[0] === 'no') {
                 callback(null, null);
                 return;
                 } else if (lines[0] === 'yes' && lines.length >= 2) {
                 user = {
                 id: lines[1]
                 };
                 callback(user, null);
                 return;
                 }
                 }
                 */

                if (!authsuccess) {
                    callback(null, null);
                    return;
                } else {
                    callback(user, null);
                    return;
                }


                callback(null, new Error('The response from the server was bad'));
            });
        });
        get.on('error', function(e) {
            console.error(e);
            return callback(null, e);
        });
    };

    return Validator;

})();

exports.getMiddleware = function(ssoBaseURL, serverBaseURL, options) {
    var loginURL, validator;
    if (options == null) options = {};
    loginURL = ssoBaseURL + '/login';
    validator = new Validator(ssoBaseURL, serverBaseURL);
    return function(req, res, next) {
        var redirectURL, service, ticket, user;
        if (req.session != null) {
            if (req.session.authenticatedUser != null) {
                req.authenticatedUser = req.session.authenticatedUser;
                next();
                return;
            }
        }
        //ticket = req.param('ticket');         // Express 3
        ticket = req.query.ticket;         // Express 4
        if (ticket != null) {
            return user = validator.validate(req, ticket, function(user, error) {
                if (req.session != null) req.session.authenticatedUser = user;
                req.authenticatedUser = user;
                next();
            });
        } else {
            redirectURL = url.parse(loginURL, true);
            service = serverBaseURL + req.url;
            redirectURL.query.service = service;
            return res.redirect(url.format(redirectURL));
        }
    };
};
